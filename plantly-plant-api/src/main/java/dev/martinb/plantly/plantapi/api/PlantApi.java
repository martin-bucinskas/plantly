/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package dev.martinb.plantly.plantapi.api;

import dev.martinb.plantly.plantapi.model.Plant;
import dev.martinb.plantly.plantapi.model.PlantImage;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-03-06T20:31:33.358Z[Europe/London]")
@Validated
@Api(value = "Plant", description = "the Plant API")
public interface PlantApi {

    default PlantApiDelegate getDelegate() {
        return new PlantApiDelegate() {};
    }

    /**
     * DELETE /plants/{id} : Delete a plant
     * Deletes a plant record
     *
     * @param id Plant id (required)
     * @return Deleted plant no content response (status code 204)
     */
    @ApiOperation(value = "Delete a plant", nickname = "deletePlant", notes = "Deletes a plant record", tags={ "plant", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Deleted plant no content response") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/plants/{id}"
    )
    default ResponseEntity<Void> deletePlant(@ApiParam(value = "Plant id", required = true) @PathVariable("id") UUID id) {
        return getDelegate().deletePlant(id);
    }


    /**
     * DELETE /plants/{id}/image : Delete a plant image
     * Delete a plant image
     *
     * @param id Plant id (required)
     * @return Deleted plant image response (status code 204)
     */
    @ApiOperation(value = "Delete a plant image", nickname = "deletePlantImage", notes = "Delete a plant image", tags={ "plant", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Deleted plant image response") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/plants/{id}/image"
    )
    default ResponseEntity<Void> deletePlantImage(@ApiParam(value = "Plant id", required = true) @PathVariable("id") UUID id) {
        return getDelegate().deletePlantImage(id);
    }


    /**
     * PUT /plants/{id} : Edit details of a plant
     * Update the details of a single plant
     *
     * @param id Plant id (required)
     * @param plant  (required)
     * @return Successful plant update (status code 200)
     */
    @ApiOperation(value = "Edit details of a plant", nickname = "editPlantData", notes = "Update the details of a single plant", response = Plant.class, tags={ "plant", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful plant update", response = Plant.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/plants/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Plant> editPlantData(@ApiParam(value = "Plant id", required = true) @PathVariable("id") UUID id,@ApiParam(value = "", required = true) @Valid @RequestBody Plant plant) {
        return getDelegate().editPlantData(id, plant);
    }


    /**
     * GET /plants : Returns a list of plants for user
     * Returns a list of all registered plants for a user
     *
     * @return A JSON array of plants (status code 200)
     */
    @ApiOperation(value = "Returns a list of plants for user", nickname = "getAllPlants", notes = "Returns a list of all registered plants for a user", response = Plant.class, responseContainer = "List", tags={ "plant", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A JSON array of plants", response = Plant.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/plants",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Plant>> getAllPlants() {
        return getDelegate().getAllPlants();
    }


    /**
     * GET /plants/{id} : Get plant details
     * Get details of a specific plant
     *
     * @param id Plant id (required)
     * @return Plant response (status code 200)
     */
    @ApiOperation(value = "Get plant details", nickname = "getPlant", notes = "Get details of a specific plant", response = Plant.class, tags={ "plant", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Plant response", response = Plant.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/plants/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Plant> getPlant(@ApiParam(value = "Plant id", required = true) @PathVariable("id") UUID id) {
        return getDelegate().getPlant(id);
    }


    /**
     * GET /plants/{id}/image : Get the plant image
     * Get a plant image by id
     *
     * @param id Plant id (required)
     * @return Plant image response (status code 200)
     */
    @ApiOperation(value = "Get the plant image", nickname = "getPlantImage", notes = "Get a plant image by id", response = PlantImage.class, tags={ "plant", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Plant image response", response = PlantImage.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/plants/{id}/image",
        produces = { "application/json" }
    )
    default ResponseEntity<PlantImage> getPlantImage(@ApiParam(value = "Plant id", required = true) @PathVariable("id") UUID id) {
        return getDelegate().getPlantImage(id);
    }


    /**
     * POST /plants : Register a new plant
     * Register a new plant
     *
     * @param plant  (required)
     * @return Plant registered response (status code 201)
     */
    @ApiOperation(value = "Register a new plant", nickname = "registerPlant", notes = "Register a new plant", tags={ "plant", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Plant registered response") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/plants",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> registerPlant(@ApiParam(value = "", required = true) @Valid @RequestBody Plant plant) {
        return getDelegate().registerPlant(plant);
    }


    /**
     * POST /plants/{id}/image : Set a plant image
     * Set an image for a plant
     *
     * @param id Plant id (required)
     * @return Plant image created response (status code 201)
     */
    @ApiOperation(value = "Set a plant image", nickname = "setPlantImage", notes = "Set an image for a plant", tags={ "plant", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Plant image created response") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/plants/{id}/image"
    )
    default ResponseEntity<Void> setPlantImage(@ApiParam(value = "Plant id", required = true) @PathVariable("id") UUID id) {
        return getDelegate().setPlantImage(id);
    }

}
